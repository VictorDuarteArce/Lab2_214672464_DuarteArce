:- consult('TDAChatbot_214672464_DuarteArce.pl').

%TDA System:
%El TDA System se compone de los siguientes TDA:
%name (string)
%InitialChatbotCodeLink (int)
%Chatbots: lista de 0 o m�s Chatbots
%Users: listas de 0 o m�s usuarios
%chatHistory: Lista de Historiales de chat de 0 o m�s usuarios
%!  Historial: Lista que contiene:
%!  user (string)
%!  chat (string formateado para mostrar)
%actCID (int): representa el id del chatbot con el que se est�
% conversando
%actFid (int): representa el id del flow con el que se est�
% conversando

%Constructor:
%predicado: system(Name, InitialChatbotCodeLink, Chatbots, System).
%Dominio:
%!  Name: name (string)
%!  InitialChatbotCodeLink: InitialChatbotCodeLink (int)
%!  Chatbots: lista de chatbots
%!  System: system
%Meta principal: construir un sistema de chatbots
system(N, ICCL, Cs, [N, ICCL, Cs1, [], [], -1, -1]):-
    string(N), integer(ICCL), filter_chatbots_list(Cs, Cs1).

%Modificador:
%predicado: filter_chatbots_list(CsIn, CsOut).
%Dominio:
%!  CsIn: lista de 0 o m�s chatbots
%!  CsOut: lista de 0 o m�s chatbots
%Meta principal: filtrar por la id una lista de chatbots
%Tipo de recursi�n: de Cola
filter_chatbots_list_aux([], R, R1):- reverse(R, R1).
filter_chatbots_list_aux([H|T], L, R):- not(chatbot_member_list(H, L)),
    filter_chatbots_list_aux(T, [H|L], R).
filter_chatbots_list_aux([H|T], L, R):- chatbot_member_list(H, L),

    filter_chatbots_list_aux(T, L, R).
filter_chatbots_list(ChatbotsIn, ChatbotsOut):-
    filter_chatbots_list_aux(ChatbotsIn, [], ChatbotsOut), !.

%Verificador:
%predicado: chatbot_member_list(C, L).
%Dominio:
%!  C: chatbot
%!  L: lista de 0 o m�s chatbots
%Meta principal: averiguar en base a la id si un chatbot pertenece a
% una lista
%Tipo de recursi�n: de Cola
chatbot_member_list(C, [H|_]):- get_chatbot_chatbotID(C, Id1),
    get_chatbot_chatbotID(H, Id2), Id1 = Id2.
chatbot_member_list(C, [_|T]):- chatbot_member_list(C, T), !.

%Modificador:
%predicado: systemAddChatbot(SystemIn, Chatbot, SystemOut).
%Dominio:
%!  SystemIn: system
%!  Chatbot: chatbot
%!  SystemOut: system
%Meta principal: a�adir un chatbot sin repetir a un sistema
systemAddChatbot(Sin, C, [N, I, [C|Cs], U, CH, ActCId, ActFId]):-
    get_system_chatbots(Sin, Cs),
    not(chatbot_member_list(C, Cs)),
    get_system_name(Sin, N),
    get_system_InitialChatbotCodeLink(Sin, I),
    get_system_users(Sin, U),
    get_system_chatHistory(Sin, CH),
    get_system_actCId(Sin, ActCId),
    get_system_actFId(Sin, ActFId), !.
systemAddChatbot(S, C, S):- get_system_chatbots(S, Cs),
    chatbot_member_list(C, Cs), !.

%Selector:
%predicado: get_system_name(S, N).
%Dominio:
%!  S: system
%!  N: name (string)
%Meta principal: obtener el nombre de un sistema dado
get_system_name([N,_,_,_,_,_,_], N).

%Selector:
%predicado: get_system_InitialChatbotCodeLink(S, I).
%Dominio:
%!  S: system
%!  I: InitialChatbotCodeLink
%Meta principal: obtener la id inicial de un chatbot de un sistema dado
get_system_InitialChatbotCodeLink([_,I,_,_,_,_,_], I).

%Selector:
%predicado: get_system_chatbots(S, Cs).
%Dominio:
%!  S: system
%!  Cs: lista de 0 o m�s chatbots
%Meta principal: obtener los chatbots de un sistema dado
get_system_chatbots([_,_,Cs,_,_,_,_], Cs).

%Selector:
%predicado: get_system_users(S, U).
%Dominio:
%!  S: system
%!  U: lista de 0 o m�s users
%Meta principal: obtener los usuarios que hay en un sistema dado
get_system_users([_,_,_,U,_,_,_], U).

%Selector:
%predicado: get_system_chatHistory(S, CH).
%Dominio:
%!  S: system
%!  CH: chatHistory
%Meta principal: obtener el historial de chat de un sistema dado
get_system_chatHistory([_,_,_,_,CH,_,_], CH).

%Selector:
%predicado: get_system_actCId(S, ActCId).
%Dominio:
%!  S: system
%!  ActCId: actCId
%Meta principal: obtener la id del chatbot actual de la conversaci�n de
% un sistema dado
get_system_actCId([_,_,_,_,_,ActCId,_],ActCId).

%Selector:
%predicado: get_system_actFId(S, ActFId).
%Dominio:
%!  S: system
%!  ActCId: actFId
%Meta principal: obtener la id del flow actual de la conversaci�n de un
% sistema dado
 get_system_actFId([_,_,_,_,_,_,ActFId], ActFId).

%Modificador:
%predicado: systemAddUser(Sin, U, Sout).
%Dominio:
%!  Sin: system
%!  U: user
%!  Sout: system
%Meta principal: Agregar un usuario dado a un sistema dado sin que se
% repita
systemAddUser(S, U, S):- get_system_users(S, Users),
    user_member_list(U, Users), !.
systemAddUser(Sin, U, [N, I, Cs, [U|Users], CH, ActCId, ActFId]):-
    get_system_users(Sin, Users),
    not(user_member_list(U, Users)),
    get_system_name(Sin, N),
    get_system_InitialChatbotCodeLink(Sin, I),
    get_system_chatbots(Sin, Cs),
    get_system_chatHistory(Sin, CH),
    get_system_actCId(Sin, ActCId),
    get_system_actFId(Sin, ActFId), !.

%Verificador:
%predicado: user_member_list(U, Users).
%Dominio:
%!  U: user
%!  Users: lista de 0 o m�s usuarios
%Meta principal: Verificar si un usuario est� en una lista de usuarios
user_member_list(U, Users):- member(U, Users).

%Modificador:
%predicado: systemLogin(Sin, U, Sout).
%Dominio:
%!  Sin: system
%!  U: user
%!  Sout: system
%Meta principal: Que un usuario dado inicie sesi�n en un sistema dado.
%Meta secundaria: Dejar el sistema listo para hablar.
systemLogin(S, U,[N, I, Cs, [U|Users], [[U, First]|CH], I, FId]):-
    not(isLoggedIn(S, U)),
    get_system_users(S, Users),
    user_member_list(U, Users),
    get_system_name(S, N),
    get_system_InitialChatbotCodeLink(S, I),
    get_system_chatbots(S, Cs),
    get_system_chatHistory(S, CH),
    chosen_chatbot(Cs, I, C),
    first_message(S, First),
    get_chatbot_startFlowId(C, FId), !.
systemLogin(S,_,S).
%Para mostrar que un usuario ha iniciado sesi�n, deber� aparecer 2
% veces en el apartado de usuarios del sistema.
%Si el usuario dado no corresponde a los usuarios del sistema, se
% devuelve el mismo sistema.

%Verificador:
%predicado: isLoggedIn(S, U).
%Dominio:
%!  S: system
%!  U: user
%Meta principal: verificar si un usuario ha iniciado sesi�n
%Meta secundaria: contar el n�mero de apariciones de un elemento en una
% lista
%Tipo de recursi�n: Natural
nApariciones(_, [], 0).
nApariciones(E, [E|T], N):- nApariciones(E, T, Nt), N is Nt + 1, !.
nApariciones(E, [_|T], N):- nApariciones(E, T, N), !.
isLoggedIn(S, U):-
    get_system_users(S, Users),
    nApariciones(U, Users, N),
    N = 2.

%Modificador:
%predicado: systemLogout(Sin, Sout).
%Dominio:
%!  Sin: system
%!  Sout: system
%Meta principal: cerrar la sesi�n abierta de un sistema dado
%Meta secundaria: eliminar usuarios repetidos de una lista de usuarios
%Tipo de recursi�n: Natural
filter_users([], []).
filter_users([H|T], R):- user_member_list(H, T), filter_users(T, R), !.
filter_users([H|T], [H|R]):- filter_users(T, R), !.
systemLogout(Sin, [N, I, Cs, NewUsers, CH, -1, -1]):-
    get_system_users(Sin, Users),
    filter_users(Users, NewUsers),
    get_system_name(Sin, N),
    get_system_InitialChatbotCodeLink(Sin, I),
    get_system_chatbots(Sin, Cs),
    get_system_chatHistory(Sin, CH), !.

%Otro:
%predicado: system_chatbot_flow_string(S, CID, Fid, Str).
%Dominio:
%!  S: system
%!  CID: chatbotID (int)
%!  Fid: id de flow (int)
%!  Str: string
% Meta principal: Obtener el string del system a partir del id del
%chatbot y flow dadas
system_chatbot_flow_string(S, CID, Fid, Str):-
    get_system_chatbots(S, Cs),
    chosen_chatbot(Cs, CID, C),
    chatbot_flow_string(C, Fid, Str), !.
system_chatbot_flow_string(_,_,_,"").


%Otro:
%predicado: choose_chatbot(Cs, CID, C).
%Dominio:
%!  Cs: lista de 0 o m�s chatbots
%!  CID: chatbotID
%!  C: chatbot
%Meta principal: Obtener un chatbot de una lista de chatbots a partir
% de su id
chosen_chatbot([H|_], CID, H):- get_chatbot_chatbotID(H, CID).
chosen_chatbot([_|T], CID, R):- chosen_chatbot(T, CID, R).


%Modificador:
%predicado: systemTalkRec(Sin, M, Sout).
%Dominio:
%!  Sin: system
%!  M: message (string)
%!  Sout: system
%Meta principal: Conversar con el sistema, solo si el usuario ha
% iniciado sesi�n
systemTalkRec(S, M, [N, I, Cs, [U|Users], [[U, NewCH]|CH],NewActCId, NewActFId]):-
    isLoggedIn(S, U), %Verifica si el usuario ha iniciado sesi�n
    get_system_name(S, N),
    get_system_InitialChatbotCodeLink(S, I),
    get_system_chatbots(S, Cs),
    get_system_users(S, [U|Users]),
    get_system_actCId(S, ActCId),
    get_system_actFId(S, ActFId),
    chosen_chatbot(Cs, ActCId, CAct),
    get_chatbot_flows(CAct, Fs),
    chosen_flow(Fs, ActFId, FAct),
    get_flow_Options(FAct, Ops),
    chosen_option(Ops, M, OChosen),
    get_Option_chatbotCodeLink(OChosen, NewActCId),
    get_Option_InitialflowCodeLink(OChosen, NewActFId),
    get_system_chatHistory(S, [[U,CHStr]|CH]),
    concat(CHStr, "\n", NewCH0),
    concat(NewCH0, U, NewCH1),
    concat(NewCH1, ": ", NewCH2),
    concat(NewCH2, M, NewCH3),
    concat(NewCH3, "\nSystem: ", NewCH4),
    system_chatbot_flow_string(S, NewActCId, NewActFId, SysMsg),
    concat(NewCH4, SysMsg, NewCH), !.
systemTalkRec(S,_,S).

%Otro:
%predicado: chosen_option(Ops, M, O).
%Dominio:
%!  Ops: lista de 0 o m�s opciones
%!  M: message (string)
%!  O: option
% Meta principal: elegir la opci�n dentro de una lista de opciones
% seg�yn el mensaje dado.
chosen_option([H|_], M, H):- atom_number(M, N), get_Option_code(H, N), !.
chosen_option([H|_], M, H):-
    get_Option_keywords(H, Keys),
    member_keyword(M, Keys), !.
chosen_option([_|T], M, R):- chosen_option(T, M, R).

%Otro:
%predicado: first_message(Sin, Str).
%Dominio:
%!  Sin: system
%!  Str: string
%Meta principal: obtener el primer mensaje que debe decir el sistema
% dado
first_message(S, Str):-
    get_system_InitialChatbotCodeLink(S, I),
    get_system_chatbots(S, Cs),
    chosen_chatbot(Cs, I, C),
    get_chatbot_welcomeMessage(C, W),
    get_chatbot_startFlowId(C, FID),
    system_chatbot_flow_string(S, I, FID, Str1),
    concat(W, "\nSystem: ", Str2),
    concat(Str2, Str1, Str).

%Otro:
%predicado: systemSynthesis(Sin, U, Str).
%Dominio:
%!  Sin: system
%!  U: user
%!  Str: string
%Meta principal: Obtener la conversaci�n de un usuario dado con el
% system
systemSynthesis(S, U, Str):-
    get_system_chatHistory(S, CH),
    get_conversation_from_CH(CH, U, Str), !.
get_conversation_from_CH([[U, Str]|_], U, Str).
get_conversation_from_CH([_|T], U, Str):-
    get_conversation_from_CH(T, U, Str), !.

%Otro:
%predicado: systemSimulate(Sin, Max, Seed, Sout).
%Dominio:
%!  Sin: system
%!  Max: maxInteractions (int)
%!  Seed: seed (int)
%!  Sout: system
%Meta principal: simular una conversaci�n con el sistema.
messages(Seed, L):- messages_aux(Seed, K), reverse(K, L).
messages_aux(Seed, [Seed]):- integer(Seed), Seed < 10, !.
messages_aux(Seed, [H|T]):-
    H is Seed mod 10, NewSeed is div(Seed, 10), messages_aux(NewSeed, T), !.
systemSimulate_aux(S, 0,_, S).
systemSimulate_aux(S,_,[], S).
systemSimulate_aux(Sin, Max, [H|T], Sout):-
    number_string(H, Hs),
    systemTalkRec(Sin, Hs, Sout1),
    NewMax is Max - 1,
    systemSimulate_aux(Sout1, NewMax, T, Sout).

systemSimulate(Sin, Max, Seed, Sout):-
    systemAddUser(Sin, "user", Sin1),
    systemLogin(Sin1, "user", Sin2),
    myRandom(Seed, RandomizedSeed),
    messages(RandomizedSeed, Msgs),
    systemSimulate_aux(Sin2, Max, Msgs, Sout), !.

%Otro:
myRandom(Xn, Xn1):-
	MulTemp is 1103515245 * Xn,
	SumTemp is MulTemp + 12345,
	Xn1 is SumTemp mod 2147483648.































